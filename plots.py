import simulation as sim
import seaborn as sns
import matplotlib.pyplot as plt
import scipy as sp
import scipy.constants as spc
import concurrent.futures as ft
import numpy as np
import pandas as pd
import os, time

class Plots:
    def plot_simulation_animation(m_balls_animation=5e-26, r_balls_animation=0.2,
                                N_balls_animation=100, collisions_animation=500,
                                r_container_animation=10,
                                random_speed_range_animation=500):
        """ plot_simulation_animation | Plot the animation of the simulation.
                < PARAMETERS >
                -> m_balls_animation(str, optional):
                -> r_balls_animation

        """
        print("Commencing the Simulation Animation...")
        sim_test_animation = sim.Simulation(m_balls=m_balls_animation, 
            r_balls=r_balls_animation, N_balls=N_balls_animation, r_container=
            r_container_animation, random_speed_range=random_speed_range_animation)

        sim_test_animation.run(collisions=collisions_animation, animate=True,
                               sim_title="1. Simulation")

    def generate_dataset():
        """ generate_dataset | Generates a dataset
        """
        DATA_PATH = os.path.join(os.getcwd(), "Data")
        if not os.path.exists(DATA_PATH): os.makedirs(DATA_PATH)
        m_ball = 5e-26
        l_N_ball = [10, 20]
        l_r_ball = [2, 4]
        l_r_container = [100, 200]
        l_random_speed_range = [500, 1000]
        collisions = 50

        print("Starting Simulations")

        for r_ball in l_r_ball:
            for N_ball in l_N_ball:
                for r_container in l_r_container:
                    for random_speed_range in l_random_speed_range:
                        fname = f"dataset_{N_ball}_{r_ball}_{r_container}_\
                                 {m_ball}_{random_speed_range}_{collisions}.csv"
                        FILE_PATH = os.path.join(DATA_PATH, fname)
                        if os.path.exists(FILE_PATH):
                            print(f"exists: {N_ball} balls, r_ball = {r_ball},\
                                    max speed = {random_speed_range},\
                                    r_container = {r_container},\
                                    {collisions} collisions")
                            continue
                        else:
                            s = sim.Simulation(N_balls=N_ball, r_container=r_container,
                                               r_balls=r_ball, m_balls=m_ball,
                                               random_speed_range=random_speed_range)
                            dataset = s.run(collisions=collisions, dataset=True)["dataset"]
                            dataset.to_csv(FILE_PATH)
                            print(f"Generated {FILE_PATH}")

    def plot_ideal_gas_law(V, N, T, parameter):
        """ plot_ideal_gas_law | Calculates the ideal gas equation of state.
                < PARAMETERS >
                -> V(float): The volume of the container.
                -> N(int): The number of gas particles.
                -> T(float): The temperature.
                -> parameter(list[N_ball])
                RETURNS
                    (float): The pressure from the ideal gas law.

        """
        def ideal_gas(V=V, N=N, T=T):
            """ ideal_gas | Uses the equation of state for ideal gases.
                    < PARAMETERS >
                    -> V(float): The volume of the container.
                    -> N(int): The number of gas particles.
                    -> T(float): The temperature.
                    RETURNS
                        (float): The pressure from the ideal gas law.
            """
            return V**-1 * N * spc.Boltzmann * T

        def ideal_gas_simulations(parameter=parameter):
            """ ideal_gas_simulations | Produces a 2D rigid disc collision simulation.
                    < PARAMETERS >
                    -> N_ball(int): The system's number of balls.
                    -> r_container(float): The container's radius.
                    -> random_speed_range(float): The range of speeds over which
                            the component velocity of the balls is generated by
                            a uniform distribution given by: 
                            [-random_speed_range, random_speed_range]
                    -> speed(list[np.ndarray(float)]): List of ball velocities.
                    RETURNS
                        (dict(float)): A dictionary containing the average
                                       systemic temperature and pressure.
            """
            N_ball, random_speed_range, r_container, speed = parameter[0],\
                 parameter[1], parameter[2], parameter[3]
            sim_IGL = sim.Simulation(N_balls=N_ball, r_container=r_container,
                      r_ball=r_ball, r_container=parameter[2], m_ball= m_ball,
                      random_speed_range=random_speed_range)
            sim_IGL.set_vel_ball(speed)
            result = sim_IGL.run(collisions=collisions, pressure=True,\
                                 temperature=True, progress=False)
            return result

        m_ball = 5e-26
        r_ball = 0.1
        collisions = 500
        r_containers = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]
        N_balls = [50, 100]
        random_speed_ranges = [500, 1000]

        volumes = [np.pi * r**2 for r in r_containers]
        speeds, parameters, pressures, temperatures = [], [], [], []

        if __name__ == "__main__": 
            print("Generating speeds")
            index = 0
            for N_ball in N_balls:
                for random_speed_range in random_speed_ranges:
                    for r_container in r_containers:
                        parameters.append([N_ball, random_speed_range, r_container,
                                           speeds[index]])
                    index += 1
            print("Starting Simulations...")
            t_start = time.perf_counter()

            with ft.ProcessPoolExecutor() as executor:
                results = executor.map(ideal_gas_simulations, parameters)
            t_end = time.perf_counter()
            print(f"Time taken = {round(t_end - t_start, 2)}s")

            for i, result in enumerate(results):
                pressures.append(result["average pressure"])
                if i % len(volumes) == 0: temperatures.append(result["<temperature>"])

            arr_fit = np.linspace(volumes[0], volumes[-1], 1000)
            print("Plotting First Graph...")

            j = 0
            plt.figure(num="Ideal Gas Law")
            sns.set_theme(context="paper", style="darkgrid", palette="muted")
            for N_ball in N_balls:
                for random_speed_range in random_speed_ranges:
                    legend = f"N = {N_ball}, T = %s K" %(float("%.3g" % temperatures[j]))
                    plt.plot(arr_fit, ideal_gas(arr_fit, N_ball, temperatures[j]),
                             label=legend)
                    j += 1
            
            for i, _ in enumerate(temperatures):
                pressure_temp = []
                for j, _ in enumerate(volumes):
                    pressure_temp.append(pressures[i*len(volumes) + j])
                plt.plot(volumes, pressure_temp, "o", mec="white", mew=0.5)

            plt.title("Ideal Gas Law")
            plt.xlabel(r"Volume /$m^2$")
            plt.ylabel(r"Pressure /Pa")
            plt.legend; plt.tight_layout(); plt.show()

Plots.plot_simulation_animation()
Plots.generate_dataset()
Plots.plot_ideal_gas_law()